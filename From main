
int open_port()
{

    int fd; /* File descriptor for the port */
    fd = open("/dev/ttyUSB0", O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1)
    {

        //Could not open the port.
        perror("open_port: Unable to open /dev/ttyUSB0 - ");
    }
    else
    {
        fcntl(fd, F_SETFL, 0);
    }

    return (fd);
}

void initialise_port(int fd)
{
    struct termios options;

    //Get the current options for the port...
    tcgetattr(fd, &options);

    //Set the baud rates to 115200...
    cfsetispeed(&options, B115200);
    cfsetospeed(&options, B115200);

    //Enable the receiver and set local mode...

    options.c_cflag |= (CLOCAL | CREAD);

    //Set the new options for the port...
    options.c_cflag &= ~PARENB;
    options.c_cflag &= ~CSTOPB;
    options.c_cflag &= ~CSIZE;
    options.c_cflag |= CS8;
    tcsetattr(fd, TCSAFLUSH, &options);
}

void *gather_data_USB_TMP(void *ptr)
{
    int fd = open_port();
    if (fd != -1)
    {
        initialise_port(fd);
        fcntl(fd, F_SETFL, FNDELAY);
    }
    else
    {
        return (int*) - 1;
    }

    fcntl(fd, F_SETFL, 0);
    int char_from_serial;

    //This will be in a thread some place else
    while (1)
    {
        read(fd, &char_from_serial, sizeof (char));
        char_from_serial = char_from_serial & 0xFF;

        printf(" %x", char_from_serial);
    }
}

void *gather_data_USB(void *ptr)
{
    int fd = open_port();
    if (fd != -1)
    {
        initialise_port(fd);
        fcntl(fd, F_SETFL, FNDELAY);
    }
    else
        return (int*) - 1;

    fcntl(fd, F_SETFL, 0);
    int char_from_serial;

    //This will be in a thread some place else
    while (1)
    {
        read(fd, &char_from_serial, sizeof (char));
        char_from_serial = char_from_serial & 0xFF;

        //printf("%x", char_from_serial);

        //Communication starts with 0xC0 0xF0
        if (char_from_serial == 0xc0)
        {
            //printf(" Found 0xC0");

            char_from_serial = 0;
            read(fd, &char_from_serial, sizeof (char));
            char_from_serial = char_from_serial & 0xFF;

            //printf(" %x", char_from_serial);

            if (char_from_serial == 0xf0)
            {
                //printf(" Found 0xF0");

                /*
                int n = 0;
                read(fd, &n, sizeof (char));
                //Should not happen
                if (n == 0)
                {
                    raise(SIGRTMIN);
                    //printf(" Pen up\n");
                }
                 */

                int n = 0;
                read(fd, &n, sizeof (char));
                //Get initial touch point and signal MouseTouch
                read_data_from_file(fd);
                raise(SIGUSR1);

                //If multi-touch 
                for (int i = 1; i < n; i++)
                {
                    //read from file and add to queue
                    read_data_from_file(fd);
                    raise(SIGUSR2);
                }
                char_from_serial = 0;
                read(fd, &char_from_serial, sizeof (char));
                char_from_serial = char_from_serial & 255;
                if (char_from_serial = 240)
                {
                    char_from_serial = 0;
                    read(fd, &char_from_serial, sizeof (char));
                    if (char_from_serial = 192)
                    {
                        //printf("\n\nWORKED!!!!");
                    }
                }

                //Do until n==0
                while (1)
                {
                    read(fd, &char_from_serial, sizeof (char));
                    char_from_serial = char_from_serial & 0xFF;

                    //printf("%x", char_from_serial);

                    //Communication starts with 0xC0 0xF0
                    if (char_from_serial == 0xc0)
                    {
                        //printf(" Found 0xC0");

                        char_from_serial = 0;
                        read(fd, &char_from_serial, sizeof (char));
                        char_from_serial = char_from_serial & 0xFF;

                        //printf(" %x", char_from_serial);

                        if (char_from_serial == 0xf0)
                        {
                            n = 0;
                            read(fd, &n, sizeof (char));
                            //Get initial touch point and signal MouseTouch
                            if (n == 0)
                            {
                                raise(SIGRTMIN);
                                break;
                                //printf(" Pen up\n");
                            }
                            read_data_from_file(fd);
                            raise(SIGUSR2);


                            //If multi-touch 
                            for (int i = 1; i < n; i++)
                            {
                                //read from file and add to queue
                                read_data_from_file(fd);
                                raise(SIGUSR2);
                            }
                            char_from_serial = 0;
                            read(fd, &char_from_serial, sizeof (char));
                            char_from_serial = char_from_serial & 255;
                            if (char_from_serial = 240)
                            {
                                char_from_serial = 0;
                                read(fd, &char_from_serial, sizeof (char));
                                if (char_from_serial = 192)
                                {
                                    //printf("\n\nWORKED!!!!");
                                }
                            }

                        }
                    }


                }

                char_from_serial = 0;
                read(fd, &char_from_serial, sizeof (char));
                char_from_serial = char_from_serial & 255;
                if (char_from_serial = 240)
                {
                    char_from_serial = 0;
                    read(fd, &char_from_serial, sizeof (char));
                    if (char_from_serial = 192)
                    {
                        //printf("\n\nWORKED!!!!");
                    }
                }


            }
            else
                printf(" did not find 0xF0");

        }//Communication ends with 0xF0 0xC0
        else if (char_from_serial == 240)
        {
            //printf(" start end, found 0xF0");
            char_from_serial = 0;

            continue;

        }

        //Keeping new line for testing purpose
        printf("\n");
        //else
        //    printf("nope\n");
        char_from_serial = 0;
    }
}

void *display_on_screen(void *ptr)
{
    while (1)
    {
        //If no new points in queue wait for signal from USB driver
        pthread_mutex_lock(&m_mutex_Points);
        while (mPoints.empty())
            pthread_cond_wait(&m_cond_Points, &m_mutex_Points);


        Points *new_point = mPoints.front();
        mPoints.pop_front();

        /*
        QTestEventList *eventos = new QTestEventList();
        eventos->addMouseClick(Qt::LeftButton, 0, QPoint(100, 200), -1);
        eventos->simulate(this);
        
        
        QPoint point;
        point.setX(new_point->getX());
        point.setY(new_point->getY());
        QMouseEvent *e=new QMouseEvent(QEvent::MouseButtonPress, point, Qt::LeftButton, Qt::LeftButton);
        QApplication::sendEvent(NULL, e);

        e=new QMouseEvent(QEvent::MouseButtonRelease, point, Qt::LeftButton, Qt::LeftButton);
        QApplication::sendEvent(NULL, e);
        delete e;

         * */

        pthread_mutex_unlock(&m_mutex_Points);

        // DISPLAY NEW points here
      //  printf(" New points are ready X:%x Y:%x", new_point->getX(), new_point->getY());

        /*
         * Will have to test the display and remove useless points. Controller keeps on sending info while a single point is touched. 
         * From initial testing there is no hardware palm rejection, most likely needs to be implemented in software
         */

        delete new_point;
    }


}

int read_data_from_file(int fd)
{
    int column, row, uX, lX, uY, lY;

    //Gathering the X and Y points
    read(fd, &column, sizeof (char));
    read(fd, &row, sizeof (char));
    read(fd, &uX, sizeof (char));
    read(fd, &lX, sizeof (char));
    read(fd, &uY, sizeof (char));
    read(fd, &lY, sizeof (char));

    //Removing any possible garbage 
    column = column & 255;
    row = row & 255;
    uX = uX & 255;
    lX = lX & 255;
    uY = uY & 255;
    lY = lY & 255;

    //Creating the X and Y point
    uX = uX << 8;
    uY = uY << 8;
    int X = uX + lX;
    int Y = uY + lY;

    //For testing purpose
    //printf(" Before creating object: %x, %x, %x, %x, %x, %x",column, row, uX, lX, uY, lY );

    Points * point = new Points(column, row, X, Y);

    //Locking shared variable
    pthread_mutex_lock(&m_mutex_Points);
    mPoints.push_back(point);

    //Signaling display thread that a new point is ready                    
    pthread_cond_signal(&m_cond_Points);
    pthread_mutex_unlock(&m_mutex_Points);
   // raise(SIGRTMIN);
}
